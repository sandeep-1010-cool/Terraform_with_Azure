name: Terraform CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
      action:
        description: 'Action to perform'
        required: true
        default: 'validate'
        type: choice
        options:
          - validate
          - plan
          - apply
      auto_approve:
        description: 'Auto approve deployment'
        required: false
        default: false
        type: boolean

jobs:
  # Validation and Quality Checks
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_version: [1.6.6, 1.7.0]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Validate
        uses: ./.github/actions/terraform-validate
        with:
          terraform-version: ${{ matrix.terraform_version }}
          environment: 'dev'

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Lint
        uses: ./.github/actions/terraform-lint

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Security Scan
        uses: ./.github/actions/terraform-security
        with:
          github-token: ${{ github.token }}

  # Planning Job
  plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Plan
        uses: ./.github/actions/terraform-plan
        with:
          environment: 'dev'
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.run_number }}
          path: plan.tfplan
          retention-days: 30

      - name: Comment PR with Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan üìã
            *Workflow: \`${{ github.workflow }}\`*
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}

  # Deployment Job
  deploy-dev:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev' && github.event.inputs.action == 'apply')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Apply (Dev)
        uses: ./.github/actions/terraform-apply
        with:
          environment: 'dev'
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auto-approve: ${{ github.event.inputs.auto_approve || 'true' }}

  # Notification Job
  notify:
    needs: [validate, lint, security-scan, plan, deploy-dev]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Pipeline Status
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            
            let status = '‚úÖ All jobs successful';
            let color = 'good';
            
            const failedJobs = Object.entries(jobs)
              .filter(([name, job]) => job.result === 'failure')
              .map(([name]) => name);
            
            if (failedJobs.length > 0) {
              status = `‚ùå Failed jobs: ${failedJobs.join(', ')}`;
              color = 'danger';
            } else {
              const cancelledJobs = Object.entries(jobs)
                .filter(([name, job]) => job.result === 'cancelled')
                .map(([name]) => name);
              
              if (cancelledJobs.length > 0) {
                status = `‚ö†Ô∏è Cancelled jobs: ${cancelledJobs.join(', ')}`;
                color = 'warning';
              }
            }
            
            console.log(`Pipeline Status: ${status}`); 